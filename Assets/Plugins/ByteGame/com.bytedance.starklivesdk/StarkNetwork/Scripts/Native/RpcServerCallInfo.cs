//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace StarkMatchmaking {

public class RpcServerCallInfo : MessageBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RpcServerCallInfo(global::System.IntPtr cPtr, bool cMemoryOwn) : base(stark_matchmakingPINVOKE.RpcServerCallInfo_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RpcServerCallInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          stark_matchmakingPINVOKE.delete_RpcServerCallInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public string method_name {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_method_name_set(swigCPtr, value);
      if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = stark_matchmakingPINVOKE.RpcServerCallInfo_method_name_get(swigCPtr);
      if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vec_string param_type_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_param_type_arr_set(swigCPtr, Vec_string.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_param_type_arr_get(swigCPtr);
      Vec_string ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_string(cPtr, false);
      return ret;
    } 
  }

  public Vec_Int int_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_int_arr_set(swigCPtr, Vec_Int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_int_arr_get(swigCPtr);
      Vec_Int ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_Int(cPtr, false);
      return ret;
    } 
  }

  public Vec_ulong uint64_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_uint64_arr_set(swigCPtr, Vec_ulong.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_uint64_arr_get(swigCPtr);
      Vec_ulong ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_ulong(cPtr, false);
      return ret;
    } 
  }

  public Vec_string str_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_str_arr_set(swigCPtr, Vec_string.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_str_arr_get(swigCPtr);
      Vec_string ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_string(cPtr, false);
      return ret;
    } 
  }

  public Vec_Bool bool_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_bool_arr_set(swigCPtr, Vec_Bool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_bool_arr_get(swigCPtr);
      Vec_Bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_Bool(cPtr, false);
      return ret;
    } 
  }

  public Vec_Double double_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_double_arr_set(swigCPtr, Vec_Double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_double_arr_get(swigCPtr);
      Vec_Double ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_Double(cPtr, false);
      return ret;
    } 
  }

  public Vec_UInt uint32_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_uint32_arr_set(swigCPtr, Vec_UInt.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_uint32_arr_get(swigCPtr);
      Vec_UInt ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_UInt(cPtr, false);
      return ret;
    } 
  }

  public Vec_long int64_arr {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_int64_arr_set(swigCPtr, Vec_long.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_int64_arr_get(swigCPtr);
      Vec_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vec_long(cPtr, false);
      return ret;
    } 
  }

  public RpcCallContext context {
    set {
      stark_matchmakingPINVOKE.RpcServerCallInfo_context_set(swigCPtr, RpcCallContext.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = stark_matchmakingPINVOKE.RpcServerCallInfo_context_get(swigCPtr);
      RpcCallContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new RpcCallContext(cPtr, false);
      return ret;
    } 
  }

  public RpcServerCallInfo() : this(stark_matchmakingPINVOKE.new_RpcServerCallInfo(), true) {
  }

}

}
