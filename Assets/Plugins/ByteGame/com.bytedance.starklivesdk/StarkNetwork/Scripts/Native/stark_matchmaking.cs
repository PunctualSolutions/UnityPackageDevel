//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace StarkMatchmaking {

public class stark_matchmaking {
  public static void SetLogDelegate(SWIGTYPE_p_f_int_p_q_const__char__void onLog) {
    stark_matchmakingPINVOKE.SetLogDelegate(SWIGTYPE_p_f_int_p_q_const__char__void.getCPtr(onLog));
  }

  public static void CallServerMethod(string methodName, SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param) {
    stark_matchmakingPINVOKE.CallServerMethod(methodName, SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param));
    if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CallTargetServerMethod(uint target_hash_id, ulong target_id, string methodName, SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param) {
    stark_matchmakingPINVOKE.CallTargetServerMethod(target_hash_id, target_id, methodName, SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param));
    if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
  }

  public static long GetRTT() {
    long ret = stark_matchmakingPINVOKE.GetRTT();
    return ret;
  }

  public static ulong Connect(string host, int port, string token, string appId) {
    ulong ret = stark_matchmakingPINVOKE.Connect(host, port, token, appId);
    return ret;
  }

  public static ulong TestConnect(string host, int port, string token, string appId) {
    ulong ret = stark_matchmakingPINVOKE.TestConnect(host, port, token, appId);
    return ret;
  }

  public static void UpdateNetLib() {
    stark_matchmakingPINVOKE.UpdateNetLib();
  }

  public static Message PopMessage() {
    global::System.IntPtr cPtr = stark_matchmakingPINVOKE.PopMessage();
    Message ret = (cPtr == global::System.IntPtr.Zero) ? null : new Message(cPtr, false);
    return ret;
  }

  public static void FreeMessage(Message eventInfo) {
    stark_matchmakingPINVOKE.FreeMessage(Message.getCPtr(eventInfo));
  }

  public static bool Disconnect() {
    bool ret = stark_matchmakingPINVOKE.Disconnect();
    return ret;
  }

  public static ulong MatchmakingEnqueue(MatchmakingOptions MatchmakingOptions) {
    ulong ret = stark_matchmakingPINVOKE.MatchmakingEnqueue(MatchmakingOptions.getCPtr(MatchmakingOptions));
    return ret;
  }

  public static ulong MatchmakingCancel() {
    ulong ret = stark_matchmakingPINVOKE.MatchmakingCancel();
    return ret;
  }

  public static void SendSyncMsgInRoom(string msg, ulong playerId, ulong roomId) {
    stark_matchmakingPINVOKE.SendSyncMsgInRoom(msg, playerId, roomId);
  }

  public static ulong GetSelfUid() {
    ulong ret = stark_matchmakingPINVOKE.GetSelfUid();
    return ret;
  }

  public static ulong GetCurrentState() {
    ulong ret = stark_matchmakingPINVOKE.GetCurrentState();
    return ret;
  }

  public static ulong CreateRoom(CreateRoomOption createRoomOption) {
    ulong ret = stark_matchmakingPINVOKE.CreateRoom(CreateRoomOption.getCPtr(createRoomOption));
    return ret;
  }

  public static ulong JoinRoom(ulong roomId) {
    ulong ret = stark_matchmakingPINVOKE.JoinRoom(roomId);
    return ret;
  }

  public static ulong LeaveRoom(ulong roomId) {
    ulong ret = stark_matchmakingPINVOKE.LeaveRoom(roomId);
    return ret;
  }

  public static ulong AddOrUpdateRoomMetaData(ulong roomId, MetaData metaData) {
    ulong ret = stark_matchmakingPINVOKE.AddOrUpdateRoomMetaData(roomId, MetaData.getCPtr(metaData));
    return ret;
  }

  public static ulong KickoutUser(ulong roomId, ulong playerId) {
    ulong ret = stark_matchmakingPINVOKE.KickoutUser(roomId, playerId);
    return ret;
  }

  public static ulong HandOverOwner(ulong roomId, ulong newOwnerId) {
    ulong ret = stark_matchmakingPINVOKE.HandOverOwner(roomId, newOwnerId);
    return ret;
  }

  public static ulong SwitchRoom(ulong roomId) {
    ulong ret = stark_matchmakingPINVOKE.SwitchRoom(roomId);
    return ret;
  }

  public static ulong JoinRoomWithToken(string token) {
    ulong ret = stark_matchmakingPINVOKE.JoinRoomWithToken(token);
    if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NetSendPacket2UID(ulong roomId, ulong userUID, uint length, SWIGTYPE_p_void bytes, bool reliable) {
    bool ret = stark_matchmakingPINVOKE.NetSendPacket2UID(roomId, userUID, length, SWIGTYPE_p_void.getCPtr(bytes), reliable);
    return ret;
  }

  public static bool NetSendPacket2Room(ulong roomId, uint length, SWIGTYPE_p_void bytes, bool reliable) {
    bool ret = stark_matchmakingPINVOKE.NetSendPacket2Room(roomId, length, SWIGTYPE_p_void.getCPtr(bytes), reliable);
    return ret;
  }

  public static SWIGTYPE_p_bg__cs_rpc__IBGRpcParams GetBGRpcParam() {
    global::System.IntPtr cPtr = stark_matchmakingPINVOKE.GetBGRpcParam();
    SWIGTYPE_p_bg__cs_rpc__IBGRpcParams ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bg__cs_rpc__IBGRpcParams(cPtr, false);
    return ret;
  }

  public static bool PushIntToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, int arg) {
    bool ret = stark_matchmakingPINVOKE.PushIntToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), arg);
    return ret;
  }

  public static bool PushInt64ToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, long arg) {
    bool ret = stark_matchmakingPINVOKE.PushInt64ToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), arg);
    return ret;
  }

  public static bool PushUInt64ToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, ulong arg) {
    bool ret = stark_matchmakingPINVOKE.PushUInt64ToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), arg);
    return ret;
  }

  public static bool PushDoubleToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, double arg) {
    bool ret = stark_matchmakingPINVOKE.PushDoubleToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), arg);
    return ret;
  }

  public static bool PushStringToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, string str) {
    bool ret = stark_matchmakingPINVOKE.PushStringToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), str);
    return ret;
  }

  public static bool PushBooleanToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams param, bool bool_val) {
    bool ret = stark_matchmakingPINVOKE.PushBooleanToBGRpcParam(SWIGTYPE_p_bg__cs_rpc__IBGRpcParams.getCPtr(param), bool_val);
    return ret;
  }

  public static void RegisterCustomSimpleMethod(string methodName, Vec_string paramsType) {
    stark_matchmakingPINVOKE.RegisterCustomSimpleMethod(methodName, Vec_string.getCPtr(paramsType));
    if (stark_matchmakingPINVOKE.SWIGPendingException.Pending) throw stark_matchmakingPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
